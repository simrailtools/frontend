// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { FindUsersBySteamIdsData, FindUsersBySteamIdsResponses, FindUsersBySteamIdsErrors, FindRailcarsByIdsData, FindRailcarsByIdsResponses, FindRailcarsByIdsErrors, FindPointsByIdData, FindPointsByIdResponses, FindPointsByIdErrors, FindJourneysByIdsData, FindJourneysByIdsResponses, FindJourneysByIdsErrors, FindVehicleCompositionByJourneyIdData, FindVehicleCompositionByJourneyIdResponses, FindVehicleCompositionByJourneyIdErrors, FindServerByIdData, FindServerByIdResponses, FindServerByIdErrors, FindServerByCodeData, FindServerByCodeResponses, FindServerByCodeErrors, ListServersData, ListServersResponses, ListServersErrors, FindRailcarByApiNameData, FindRailcarByApiNameResponses, FindRailcarByApiNameErrors, FindRailcarByIdData, FindRailcarByIdResponses, FindRailcarByIdErrors, FindPointByPositionData, FindPointByPositionResponses, FindPointByPositionErrors, FindPointBySimRailPointIdData, FindPointBySimRailPointIdResponses, FindPointBySimRailPointIdErrors, FindPointByNameData, FindPointByNameResponses, FindPointByNameErrors, FindPointByIdData, FindPointByIdResponses, FindPointByIdErrors, ListPointsData, ListPointsResponses, ListPointsErrors, FindMapPolylineByJourneyData, FindMapPolylineByJourneyResponses, FindMapPolylineByJourneyErrors, FindJourneysByRailcarData, FindJourneysByRailcarResponses, FindJourneysByRailcarErrors, FindJourneysByTailData, FindJourneysByTailResponses, FindJourneysByTailErrors, FindJourneysByPlayableDepartureData, FindJourneysByPlayableDepartureResponses, FindJourneysByPlayableDepartureErrors, FindJourneyByIdData, FindJourneyByIdResponses, FindJourneyByIdErrors, FindJourneysByEventData, FindJourneysByEventResponses, FindJourneysByEventErrors, ListActiveJourneysData, ListActiveJourneysResponses, ListActiveJourneysErrors, FindDispatchPostsData, FindDispatchPostsResponses, FindDispatchPostsErrors, FindDispatchPostByIdData, FindDispatchPostByIdResponses, FindDispatchPostByIdErrors, ListBoardDeparturesData, ListBoardDeparturesResponses, ListBoardDeparturesErrors, ListBoardArrivalsData, ListBoardArrivalsResponses, ListBoardArrivalsErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get a batch of users (up to 100) by their steam id
 * Get a batch of users (up to 100) in a single request. If an id is provided which can't be resolved to a user info,
 * the id is skipped and there will be no reference to the id in the response array. The provided ids must all be in
 * the SteamID64 format.
 *
 */
export const findUsersBySteamIds = <ThrowOnError extends boolean = false>(options: Options<FindUsersBySteamIdsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<FindUsersBySteamIdsResponses, FindUsersBySteamIdsErrors, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/sit-users/v1/by-steam-ids',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get a batch of railcars (up to 250) by their id
 */
export const findRailcarsByIds = <ThrowOnError extends boolean = false>(options: Options<FindRailcarsByIdsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<FindRailcarsByIdsResponses, FindRailcarsByIdsErrors, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/sit-railcars/v1/by-ids',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get a batch of points (up to 250) by their id
 * Get a batch of points (up to 250) in a single request. If an id is provided which doesn't have a point associated,
 * the id is skipped and there will be no reference to the id in the response array
 *
 */
export const findPointsById = <ThrowOnError extends boolean = false>(options: Options<FindPointsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<FindPointsByIdResponses, FindPointsByIdErrors, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/sit-points/v1/by-ids',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get a batch of journeys (up to 250) by their id
 */
export const findJourneysByIds = <ThrowOnError extends boolean = false>(options: Options<FindJourneysByIdsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<FindJourneysByIdsResponses, FindJourneysByIdsErrors, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/sit-journeys/v1/by-ids',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get the vehicle composition of a journey
 */
export const findVehicleCompositionByJourneyId = <ThrowOnError extends boolean = false>(options: Options<FindVehicleCompositionByJourneyIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FindVehicleCompositionByJourneyIdResponses, FindVehicleCompositionByJourneyIdErrors, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/sit-vehicles/v1/by-journey/{id}',
        ...options
    });
};

/**
 * Get detail data about a single server by ID
 */
export const findServerById = <ThrowOnError extends boolean = false>(options: Options<FindServerByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FindServerByIdResponses, FindServerByIdErrors, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/sit-servers/v1/by-id/{id}',
        ...options
    });
};

/**
 * Get detail data about a single server by code
 */
export const findServerByCode = <ThrowOnError extends boolean = false>(options: Options<FindServerByCodeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FindServerByCodeResponses, FindServerByCodeErrors, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/sit-servers/v1/by-code/{code}',
        ...options
    });
};

/**
 * List all registered servers
 */
export const listServers = <ThrowOnError extends boolean = false>(options?: Options<ListServersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListServersResponses, ListServersErrors, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/sit-servers/v1/',
        ...options
    });
};

/**
 * Finds a single railcar using the given SimRail api id
 */
export const findRailcarByApiName = <ThrowOnError extends boolean = false>(options: Options<FindRailcarByApiNameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FindRailcarByApiNameResponses, FindRailcarByApiNameErrors, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/sit-railcars/v1/by-simrail-id',
        ...options
    });
};

/**
 * Finds a single railcar using the given id
 */
export const findRailcarById = <ThrowOnError extends boolean = false>(options: Options<FindRailcarByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FindRailcarByIdResponses, FindRailcarByIdErrors, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/sit-railcars/v1/by-id/{id}',
        ...options
    });
};

/**
 * Finds points that are located in a specified around around a given geo position
 * Finds points that are in the given radius around the given geo position. Results are sorted by their distance to
 * the given geo point, ASC (nearest point first).
 *
 */
export const findPointByPosition = <ThrowOnError extends boolean = false>(options: Options<FindPointByPositionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FindPointByPositionResponses, FindPointByPositionErrors, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/sit-points/v1/by-position',
        ...options
    });
};

/**
 * Get a point by its SimRail point id
 * Gets a point by its SimRail point id". Note that the resulting points are grouped by their operational unit, for
 * example '2528' (Małogoszcz) and '5460' (Małogoszcz PZS R35) will both return 'Małogoszcz'. Also note that some
 * points might not return any result if they are too close together and one point represents them enough
 * (for example the case for 'Zawiercie' and 'Zawiercie GT')
 *
 */
export const findPointBySimRailPointId = <ThrowOnError extends boolean = false>(options: Options<FindPointBySimRailPointIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FindPointBySimRailPointIdResponses, FindPointBySimRailPointIdErrors, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/sit-points/v1/by-point-id/{id}',
        ...options
    });
};

/**
 * Finds points whose name are matching the given search query
 * Fuzzy searches points by the given name search query. For example the search input 'Lazy' will return 'Łazy',
 * 'Łazy Łc', 'Łazy Ła' etc. Wildcard search patterns are not supported by this endpoint. Results are sorted by match
 * with the given search query, DESC (best match first).
 *
 */
export const findPointByName = <ThrowOnError extends boolean = false>(options: Options<FindPointByNameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FindPointByNameResponses, FindPointByNameErrors, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/sit-points/v1/by-name/{searchQuery}',
        ...options
    });
};

/**
 * Get the full data of a point by its id
 */
export const findPointById = <ThrowOnError extends boolean = false>(options: Options<FindPointByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FindPointByIdResponses, FindPointByIdErrors, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/sit-points/v1/by-id/{id}',
        ...options
    });
};

/**
 * List all points that are registered
 */
export const listPoints = <ThrowOnError extends boolean = false>(options?: Options<ListPointsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListPointsResponses, ListPointsErrors, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/sit-points/v1/',
        ...options
    });
};

/**
 * Get the polyline for a specific journey
 */
export const findMapPolylineByJourney = <ThrowOnError extends boolean = false>(options: Options<FindMapPolylineByJourneyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FindMapPolylineByJourneyResponses, FindMapPolylineByJourneyErrors, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/sit-maps/v1/polyline/by-journey/{id}',
        ...options
    });
};

/**
 * Finds journeys that are using the given railcar in their vehicle composition
 * Finds journeys that use the given railcar in their vehicle composition on the given date. The results might be
 * incomplete or incorrect for journeys that were not active yet, as the result data will be based on predictions
 * and not the real composition of the journey.
 *
 */
export const findJourneysByRailcar = <ThrowOnError extends boolean = false>(options: Options<FindJourneysByRailcarData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FindJourneysByRailcarResponses, FindJourneysByRailcarErrors, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/sit-journeys/v1/by-vehicle',
        ...options
    });
};

/**
 * Find journeys based on its tails
 * Filters journeys based on its start and end events, where the start event data is required for filtering and the
 * end event data can optionally be supplied for further narrowing.
 *
 */
export const findJourneysByTail = <ThrowOnError extends boolean = false>(options: Options<FindJourneysByTailData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FindJourneysByTailResponses, FindJourneysByTailErrors, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/sit-journeys/v1/by-tail',
        ...options
    });
};

/**
 * Find journeys that become playable in the provided time range
 * Finds journeys that become playable in the provided time range. Optionally additional filter parameters can be
 * provided to narrow down the results. The provided time range must be at least 1 minute and at most 60 minutes
 * long. If the start time is omitted it defaults to the current server time, if the end time is omitted it defaults
 * to the start time plus 15 minutes.
 *
 */
export const findJourneysByPlayableDeparture = <ThrowOnError extends boolean = false>(options: Options<FindJourneysByPlayableDepartureData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FindJourneysByPlayableDepartureResponses, FindJourneysByPlayableDepartureErrors, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/sit-journeys/v1/by-playable-departure',
        ...options
    });
};

/**
 * Returns a single journey by the given id
 */
export const findJourneyById = <ThrowOnError extends boolean = false>(options: Options<FindJourneyByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FindJourneyByIdResponses, FindJourneyByIdErrors, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/sit-journeys/v1/by-id/{id}',
        ...options
    });
};

/**
 * Find journeys based on one journey event matching the given search criteria
 * Find journeys based on one journey event matching the given search criteria, for example:
 * - Searching for journey number '40180' will return 'EIP 40180', 'ROJ 40180' etc.
 * - Searching for 'PWJ 146051' will also return 'ROJ 19369' that starts as 'ROJ' but switches to 'PWJ' along its route
 * - Searching for 'RE1' at '2024-12-06' will also return journeys that start at '2024-12-05' and continue on '2024-12-06'
 *
 * Multiple filter parameter can be provided and are linked in a logical AND chain. Ensure that at least the
 * journey number or journey line is provided.
 *
 */
export const findJourneysByEvent = <ThrowOnError extends boolean = false>(options: Options<FindJourneysByEventData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FindJourneysByEventResponses, FindJourneysByEventErrors, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/sit-journeys/v1/by-event',
        ...options
    });
};

/**
 * Get all journeys that are currently active on a server
 * Get descriptive information about all journeys that are currently active on a server. Data returned by this
 * endpoint updates every 15 seconds. This endpoint shouldn't be used to poll journey updates, use the event system
 * SIT-Events instead.
 *
 */
export const listActiveJourneys = <ThrowOnError extends boolean = false>(options: Options<ListActiveJourneysData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListActiveJourneysResponses, ListActiveJourneysErrors, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/sit-journeys/v1/active',
        ...options
    });
};

/**
 * Find dispatch posts based on the given filter parameters
 * Finds dispatch posts paginated based on the given filter parameters. If multiple filter parameters are provided,
 * they get chained into a logical AND chain. If no filter parameters are provided, this endpoint acts like a
 * listing endpoint.
 *
 */
export const findDispatchPosts = <ThrowOnError extends boolean = false>(options?: Options<FindDispatchPostsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<FindDispatchPostsResponses, FindDispatchPostsErrors, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/sit-dispatch-posts/v1/find',
        ...options
    });
};

/**
 * Get the detail information of a single dispatch post by its id
 */
export const findDispatchPostById = <ThrowOnError extends boolean = false>(options: Options<FindDispatchPostByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FindDispatchPostByIdResponses, FindDispatchPostByIdErrors, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/sit-dispatch-posts/v1/by-id/{id}',
        ...options
    });
};

/**
 * Get all departures within a specified timespan at a specified point
 * Lists all journeys that are departing from the specified point on the specified server within the given time span.
 * By default, a time span of 30 minutes is returned, starting at the current server time, unless otherwise specified.
 * Results are sorted by realtime time information by default. A minimum time span of 5 minutes and a maximum time
 * span of 6 hours can be requested. The start time can be 1 day in the future and 90 days in the past.
 *
 */
export const listBoardDepartures = <ThrowOnError extends boolean = false>(options: Options<ListBoardDeparturesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListBoardDeparturesResponses, ListBoardDeparturesErrors, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/sit-boards/v1/departures',
        ...options
    });
};

/**
 * Get all arrivals within a specified timespan at a specified point
 * Lists all journeys that are arriving at the specified point on the specified server within the given time span.
 * By default, a time span of 30 minutes is returned, starting at the current server time, unless otherwise specified.
 * Results are sorted by realtime time information by default. A minimum time span of 5 minutes and a maximum time
 * span of 6 hours can be requested. The start time can be 1 day in the future and 90 days in the past.
 *
 */
export const listBoardArrivals = <ThrowOnError extends boolean = false>(options: Options<ListBoardArrivalsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListBoardArrivalsResponses, ListBoardArrivalsErrors, ThrowOnError, 'data'>({
        responseStyle: 'data',
        url: '/sit-boards/v1/arrivals',
        ...options
    });
};