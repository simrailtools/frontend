// This file is auto-generated by @hey-api/openapi-ts

import { type Options, findUsersBySteamIds, findRailcarsByIds, findPointsById, findJourneysByIds, findVehicleCompositionByJourneyId, findServerById, findServerByCode, listServers, findRailcarByApiName, findRailcarById, findPointByPosition, findPointBySimRailPointId, findPointByName, findPointById, listPoints, findMapPolylineByJourney, findJourneysByRailcar, findJourneysByTail, findJourneysByPlayableDeparture, findJourneyById, findJourneysByEvent, listActiveJourneys, findDispatchPosts, findDispatchPostById, listBoardDepartures, listBoardArrivals } from '../sdk.gen';
import { queryOptions, type UseMutationOptions, infiniteQueryOptions, type InfiniteData } from '@tanstack/react-query';
import type { FindUsersBySteamIdsData, FindUsersBySteamIdsError, FindUsersBySteamIdsResponse, FindRailcarsByIdsData, FindRailcarsByIdsError, FindRailcarsByIdsResponse, FindPointsByIdData, FindPointsByIdError, FindPointsByIdResponse, FindJourneysByIdsData, FindJourneysByIdsError, FindJourneysByIdsResponse, FindVehicleCompositionByJourneyIdData, FindServerByIdData, FindServerByCodeData, ListServersData, FindRailcarByApiNameData, FindRailcarByIdData, FindPointByPositionData, FindPointBySimRailPointIdData, FindPointByNameData, FindPointByIdData, ListPointsData, ListPointsError, ListPointsResponse, FindMapPolylineByJourneyData, FindJourneysByRailcarData, FindJourneysByRailcarError, FindJourneysByRailcarResponse, FindJourneysByTailData, FindJourneysByTailError, FindJourneysByTailResponse, FindJourneysByPlayableDepartureData, FindJourneysByPlayableDepartureError, FindJourneysByPlayableDepartureResponse, FindJourneyByIdData, FindJourneysByEventData, FindJourneysByEventError, FindJourneysByEventResponse, ListActiveJourneysData, FindDispatchPostsData, FindDispatchPostsError, FindDispatchPostsResponse, FindDispatchPostByIdData, ListBoardDeparturesData, ListBoardArrivalsData } from '../types.gen';
import { client as _heyApiClient } from '../client.gen';

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: (options?.client ?? _heyApiClient).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const findUsersBySteamIdsQueryKey = (options: Options<FindUsersBySteamIdsData>) => createQueryKey('findUsersBySteamIds', options);

export const findUsersBySteamIdsOptions = (options: Options<FindUsersBySteamIdsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await findUsersBySteamIds({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: findUsersBySteamIdsQueryKey(options)
    });
};

export const findUsersBySteamIdsMutation = (options?: Partial<Options<FindUsersBySteamIdsData>>): UseMutationOptions<FindUsersBySteamIdsResponse, FindUsersBySteamIdsError, Options<FindUsersBySteamIdsData>> => {
    const mutationOptions: UseMutationOptions<FindUsersBySteamIdsResponse, FindUsersBySteamIdsError, Options<FindUsersBySteamIdsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await findUsersBySteamIds({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const findRailcarsByIdsQueryKey = (options: Options<FindRailcarsByIdsData>) => createQueryKey('findRailcarsByIds', options);

export const findRailcarsByIdsOptions = (options: Options<FindRailcarsByIdsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await findRailcarsByIds({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: findRailcarsByIdsQueryKey(options)
    });
};

export const findRailcarsByIdsMutation = (options?: Partial<Options<FindRailcarsByIdsData>>): UseMutationOptions<FindRailcarsByIdsResponse, FindRailcarsByIdsError, Options<FindRailcarsByIdsData>> => {
    const mutationOptions: UseMutationOptions<FindRailcarsByIdsResponse, FindRailcarsByIdsError, Options<FindRailcarsByIdsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await findRailcarsByIds({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const findPointsByIdQueryKey = (options: Options<FindPointsByIdData>) => createQueryKey('findPointsById', options);

export const findPointsByIdOptions = (options: Options<FindPointsByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await findPointsById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: findPointsByIdQueryKey(options)
    });
};

export const findPointsByIdMutation = (options?: Partial<Options<FindPointsByIdData>>): UseMutationOptions<FindPointsByIdResponse, FindPointsByIdError, Options<FindPointsByIdData>> => {
    const mutationOptions: UseMutationOptions<FindPointsByIdResponse, FindPointsByIdError, Options<FindPointsByIdData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await findPointsById({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const findJourneysByIdsQueryKey = (options: Options<FindJourneysByIdsData>) => createQueryKey('findJourneysByIds', options);

export const findJourneysByIdsOptions = (options: Options<FindJourneysByIdsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await findJourneysByIds({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: findJourneysByIdsQueryKey(options)
    });
};

export const findJourneysByIdsMutation = (options?: Partial<Options<FindJourneysByIdsData>>): UseMutationOptions<FindJourneysByIdsResponse, FindJourneysByIdsError, Options<FindJourneysByIdsData>> => {
    const mutationOptions: UseMutationOptions<FindJourneysByIdsResponse, FindJourneysByIdsError, Options<FindJourneysByIdsData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await findJourneysByIds({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const findVehicleCompositionByJourneyIdQueryKey = (options: Options<FindVehicleCompositionByJourneyIdData>) => createQueryKey('findVehicleCompositionByJourneyId', options);

export const findVehicleCompositionByJourneyIdOptions = (options: Options<FindVehicleCompositionByJourneyIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await findVehicleCompositionByJourneyId({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: findVehicleCompositionByJourneyIdQueryKey(options)
    });
};

export const findServerByIdQueryKey = (options: Options<FindServerByIdData>) => createQueryKey('findServerById', options);

export const findServerByIdOptions = (options: Options<FindServerByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await findServerById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: findServerByIdQueryKey(options)
    });
};

export const findServerByCodeQueryKey = (options: Options<FindServerByCodeData>) => createQueryKey('findServerByCode', options);

export const findServerByCodeOptions = (options: Options<FindServerByCodeData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await findServerByCode({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: findServerByCodeQueryKey(options)
    });
};

export const listServersQueryKey = (options?: Options<ListServersData>) => createQueryKey('listServers', options);

export const listServersOptions = (options?: Options<ListServersData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listServers({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listServersQueryKey(options)
    });
};

export const findRailcarByApiNameQueryKey = (options: Options<FindRailcarByApiNameData>) => createQueryKey('findRailcarByApiName', options);

export const findRailcarByApiNameOptions = (options: Options<FindRailcarByApiNameData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await findRailcarByApiName({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: findRailcarByApiNameQueryKey(options)
    });
};

export const findRailcarByIdQueryKey = (options: Options<FindRailcarByIdData>) => createQueryKey('findRailcarById', options);

export const findRailcarByIdOptions = (options: Options<FindRailcarByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await findRailcarById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: findRailcarByIdQueryKey(options)
    });
};

export const findPointByPositionQueryKey = (options: Options<FindPointByPositionData>) => createQueryKey('findPointByPosition', options);

export const findPointByPositionOptions = (options: Options<FindPointByPositionData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await findPointByPosition({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: findPointByPositionQueryKey(options)
    });
};

export const findPointBySimRailPointIdQueryKey = (options: Options<FindPointBySimRailPointIdData>) => createQueryKey('findPointBySimRailPointId', options);

export const findPointBySimRailPointIdOptions = (options: Options<FindPointBySimRailPointIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await findPointBySimRailPointId({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: findPointBySimRailPointIdQueryKey(options)
    });
};

export const findPointByNameQueryKey = (options: Options<FindPointByNameData>) => createQueryKey('findPointByName', options);

export const findPointByNameOptions = (options: Options<FindPointByNameData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await findPointByName({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: findPointByNameQueryKey(options)
    });
};

export const findPointByIdQueryKey = (options: Options<FindPointByIdData>) => createQueryKey('findPointById', options);

export const findPointByIdOptions = (options: Options<FindPointByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await findPointById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: findPointByIdQueryKey(options)
    });
};

export const listPointsQueryKey = (options?: Options<ListPointsData>) => createQueryKey('listPoints', options);

export const listPointsOptions = (options?: Options<ListPointsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listPoints({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listPointsQueryKey(options)
    });
};

const createInfiniteParams = <K extends Pick<QueryKey<Options>[0], 'body' | 'headers' | 'path' | 'query'>>(queryKey: QueryKey<Options>, page: K) => {
    const params = queryKey[0];
    if (page.body) {
        params.body = {
            ...queryKey[0].body as any,
            ...page.body as any
        };
    }
    if (page.headers) {
        params.headers = {
            ...queryKey[0].headers,
            ...page.headers
        };
    }
    if (page.path) {
        params.path = {
            ...queryKey[0].path as any,
            ...page.path as any
        };
    }
    if (page.query) {
        params.query = {
            ...queryKey[0].query as any,
            ...page.query as any
        };
    }
    return params as unknown as typeof page;
};

export const listPointsInfiniteQueryKey = (options?: Options<ListPointsData>): QueryKey<Options<ListPointsData>> => createQueryKey('listPoints', options, true);

export const listPointsInfiniteOptions = (options?: Options<ListPointsData>) => {
    return infiniteQueryOptions<ListPointsResponse, ListPointsError, InfiniteData<ListPointsResponse>, QueryKey<Options<ListPointsData>>, number | Pick<QueryKey<Options<ListPointsData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<ListPointsData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    page: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await listPoints({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listPointsInfiniteQueryKey(options)
    });
};

export const findMapPolylineByJourneyQueryKey = (options: Options<FindMapPolylineByJourneyData>) => createQueryKey('findMapPolylineByJourney', options);

export const findMapPolylineByJourneyOptions = (options: Options<FindMapPolylineByJourneyData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await findMapPolylineByJourney({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: findMapPolylineByJourneyQueryKey(options)
    });
};

export const findJourneysByRailcarQueryKey = (options: Options<FindJourneysByRailcarData>) => createQueryKey('findJourneysByRailcar', options);

export const findJourneysByRailcarOptions = (options: Options<FindJourneysByRailcarData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await findJourneysByRailcar({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: findJourneysByRailcarQueryKey(options)
    });
};

export const findJourneysByRailcarInfiniteQueryKey = (options: Options<FindJourneysByRailcarData>): QueryKey<Options<FindJourneysByRailcarData>> => createQueryKey('findJourneysByRailcar', options, true);

export const findJourneysByRailcarInfiniteOptions = (options: Options<FindJourneysByRailcarData>) => {
    return infiniteQueryOptions<FindJourneysByRailcarResponse, FindJourneysByRailcarError, InfiniteData<FindJourneysByRailcarResponse>, QueryKey<Options<FindJourneysByRailcarData>>, number | Pick<QueryKey<Options<FindJourneysByRailcarData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<FindJourneysByRailcarData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    page: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await findJourneysByRailcar({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: findJourneysByRailcarInfiniteQueryKey(options)
    });
};

export const findJourneysByTailQueryKey = (options: Options<FindJourneysByTailData>) => createQueryKey('findJourneysByTail', options);

export const findJourneysByTailOptions = (options: Options<FindJourneysByTailData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await findJourneysByTail({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: findJourneysByTailQueryKey(options)
    });
};

export const findJourneysByTailInfiniteQueryKey = (options: Options<FindJourneysByTailData>): QueryKey<Options<FindJourneysByTailData>> => createQueryKey('findJourneysByTail', options, true);

export const findJourneysByTailInfiniteOptions = (options: Options<FindJourneysByTailData>) => {
    return infiniteQueryOptions<FindJourneysByTailResponse, FindJourneysByTailError, InfiniteData<FindJourneysByTailResponse>, QueryKey<Options<FindJourneysByTailData>>, number | Pick<QueryKey<Options<FindJourneysByTailData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<FindJourneysByTailData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    page: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await findJourneysByTail({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: findJourneysByTailInfiniteQueryKey(options)
    });
};

export const findJourneysByPlayableDepartureQueryKey = (options: Options<FindJourneysByPlayableDepartureData>) => createQueryKey('findJourneysByPlayableDeparture', options);

export const findJourneysByPlayableDepartureOptions = (options: Options<FindJourneysByPlayableDepartureData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await findJourneysByPlayableDeparture({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: findJourneysByPlayableDepartureQueryKey(options)
    });
};

export const findJourneysByPlayableDepartureInfiniteQueryKey = (options: Options<FindJourneysByPlayableDepartureData>): QueryKey<Options<FindJourneysByPlayableDepartureData>> => createQueryKey('findJourneysByPlayableDeparture', options, true);

export const findJourneysByPlayableDepartureInfiniteOptions = (options: Options<FindJourneysByPlayableDepartureData>) => {
    return infiniteQueryOptions<FindJourneysByPlayableDepartureResponse, FindJourneysByPlayableDepartureError, InfiniteData<FindJourneysByPlayableDepartureResponse>, QueryKey<Options<FindJourneysByPlayableDepartureData>>, number | Pick<QueryKey<Options<FindJourneysByPlayableDepartureData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<FindJourneysByPlayableDepartureData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    page: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await findJourneysByPlayableDeparture({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: findJourneysByPlayableDepartureInfiniteQueryKey(options)
    });
};

export const findJourneyByIdQueryKey = (options: Options<FindJourneyByIdData>) => createQueryKey('findJourneyById', options);

export const findJourneyByIdOptions = (options: Options<FindJourneyByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await findJourneyById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: findJourneyByIdQueryKey(options)
    });
};

export const findJourneysByEventQueryKey = (options: Options<FindJourneysByEventData>) => createQueryKey('findJourneysByEvent', options);

export const findJourneysByEventOptions = (options: Options<FindJourneysByEventData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await findJourneysByEvent({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: findJourneysByEventQueryKey(options)
    });
};

export const findJourneysByEventInfiniteQueryKey = (options: Options<FindJourneysByEventData>): QueryKey<Options<FindJourneysByEventData>> => createQueryKey('findJourneysByEvent', options, true);

export const findJourneysByEventInfiniteOptions = (options: Options<FindJourneysByEventData>) => {
    return infiniteQueryOptions<FindJourneysByEventResponse, FindJourneysByEventError, InfiniteData<FindJourneysByEventResponse>, QueryKey<Options<FindJourneysByEventData>>, number | Pick<QueryKey<Options<FindJourneysByEventData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<FindJourneysByEventData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    page: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await findJourneysByEvent({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: findJourneysByEventInfiniteQueryKey(options)
    });
};

export const listActiveJourneysQueryKey = (options: Options<ListActiveJourneysData>) => createQueryKey('listActiveJourneys', options);

export const listActiveJourneysOptions = (options: Options<ListActiveJourneysData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listActiveJourneys({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listActiveJourneysQueryKey(options)
    });
};

export const findDispatchPostsQueryKey = (options?: Options<FindDispatchPostsData>) => createQueryKey('findDispatchPosts', options);

export const findDispatchPostsOptions = (options?: Options<FindDispatchPostsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await findDispatchPosts({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: findDispatchPostsQueryKey(options)
    });
};

export const findDispatchPostsInfiniteQueryKey = (options?: Options<FindDispatchPostsData>): QueryKey<Options<FindDispatchPostsData>> => createQueryKey('findDispatchPosts', options, true);

export const findDispatchPostsInfiniteOptions = (options?: Options<FindDispatchPostsData>) => {
    return infiniteQueryOptions<FindDispatchPostsResponse, FindDispatchPostsError, InfiniteData<FindDispatchPostsResponse>, QueryKey<Options<FindDispatchPostsData>>, number | Pick<QueryKey<Options<FindDispatchPostsData>>[0], 'body' | 'headers' | 'path' | 'query'>>(
    // @ts-ignore
    {
        queryFn: async ({ pageParam, queryKey, signal }) => {
            // @ts-ignore
            const page: Pick<QueryKey<Options<FindDispatchPostsData>>[0], 'body' | 'headers' | 'path' | 'query'> = typeof pageParam === 'object' ? pageParam : {
                query: {
                    page: pageParam
                }
            };
            const params = createInfiniteParams(queryKey, page);
            const { data } = await findDispatchPosts({
                ...options,
                ...params,
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: findDispatchPostsInfiniteQueryKey(options)
    });
};

export const findDispatchPostByIdQueryKey = (options: Options<FindDispatchPostByIdData>) => createQueryKey('findDispatchPostById', options);

export const findDispatchPostByIdOptions = (options: Options<FindDispatchPostByIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await findDispatchPostById({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: findDispatchPostByIdQueryKey(options)
    });
};

export const listBoardDeparturesQueryKey = (options: Options<ListBoardDeparturesData>) => createQueryKey('listBoardDepartures', options);

export const listBoardDeparturesOptions = (options: Options<ListBoardDeparturesData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listBoardDepartures({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listBoardDeparturesQueryKey(options)
    });
};

export const listBoardArrivalsQueryKey = (options: Options<ListBoardArrivalsData>) => createQueryKey('listBoardArrivals', options);

export const listBoardArrivalsOptions = (options: Options<ListBoardArrivalsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await listBoardArrivals({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: listBoardArrivalsQueryKey(options)
    });
};