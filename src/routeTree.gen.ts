/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from "./routes/__root"
import { Route as IndexImport } from "./routes/index"
import { Route as MapIndexImport } from "./routes/map/index"
import { Route as MapServerIdImport } from "./routes/map/$serverId"

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRoute,
} as any)

const MapIndexRoute = MapIndexImport.update({
  id: "/map/",
  path: "/map/",
  getParentRoute: () => rootRoute,
} as any)

const MapServerIdRoute = MapServerIdImport.update({
  id: "/map/$serverId",
  path: "/map/$serverId",
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      id: "/"
      path: "/"
      fullPath: "/"
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    "/map/$serverId": {
      id: "/map/$serverId"
      path: "/map/$serverId"
      fullPath: "/map/$serverId"
      preLoaderRoute: typeof MapServerIdImport
      parentRoute: typeof rootRoute
    }
    "/map/": {
      id: "/map/"
      path: "/map"
      fullPath: "/map"
      preLoaderRoute: typeof MapIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute
  "/map/$serverId": typeof MapServerIdRoute
  "/map": typeof MapIndexRoute
}

export interface FileRoutesByTo {
  "/": typeof IndexRoute
  "/map/$serverId": typeof MapServerIdRoute
  "/map": typeof MapIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  "/": typeof IndexRoute
  "/map/$serverId": typeof MapServerIdRoute
  "/map/": typeof MapIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: "/" | "/map/$serverId" | "/map"
  fileRoutesByTo: FileRoutesByTo
  to: "/" | "/map/$serverId" | "/map"
  id: "__root__" | "/" | "/map/$serverId" | "/map/"
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  MapServerIdRoute: typeof MapServerIdRoute
  MapIndexRoute: typeof MapIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  MapServerIdRoute: MapServerIdRoute,
  MapIndexRoute: MapIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/map/$serverId",
        "/map/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/map/$serverId": {
      "filePath": "map/$serverId.tsx"
    },
    "/map/": {
      "filePath": "map/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
