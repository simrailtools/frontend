/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from "./routes/__root"
import { Route as IndexRouteImport } from "./routes/index"
import { Route as MapIndexRouteImport } from "./routes/map/index"
import { Route as MapServerIdRouteImport } from "./routes/map/$serverId"
import { Route as JourneysJourneyIdRouteImport } from "./routes/journeys/$journeyId"

const IndexRoute = IndexRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRouteImport,
} as any)
const MapIndexRoute = MapIndexRouteImport.update({
  id: "/map/",
  path: "/map/",
  getParentRoute: () => rootRouteImport,
} as any)
const MapServerIdRoute = MapServerIdRouteImport.update({
  id: "/map/$serverId",
  path: "/map/$serverId",
  getParentRoute: () => rootRouteImport,
} as any)
const JourneysJourneyIdRoute = JourneysJourneyIdRouteImport.update({
  id: "/journeys/$journeyId",
  path: "/journeys/$journeyId",
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute
  "/journeys/$journeyId": typeof JourneysJourneyIdRoute
  "/map/$serverId": typeof MapServerIdRoute
  "/map": typeof MapIndexRoute
}
export interface FileRoutesByTo {
  "/": typeof IndexRoute
  "/journeys/$journeyId": typeof JourneysJourneyIdRoute
  "/map/$serverId": typeof MapServerIdRoute
  "/map": typeof MapIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  "/": typeof IndexRoute
  "/journeys/$journeyId": typeof JourneysJourneyIdRoute
  "/map/$serverId": typeof MapServerIdRoute
  "/map/": typeof MapIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: "/" | "/journeys/$journeyId" | "/map/$serverId" | "/map"
  fileRoutesByTo: FileRoutesByTo
  to: "/" | "/journeys/$journeyId" | "/map/$serverId" | "/map"
  id: "__root__" | "/" | "/journeys/$journeyId" | "/map/$serverId" | "/map/"
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  JourneysJourneyIdRoute: typeof JourneysJourneyIdRoute
  MapServerIdRoute: typeof MapServerIdRoute
  MapIndexRoute: typeof MapIndexRoute
}

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      id: "/"
      path: "/"
      fullPath: "/"
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/map/": {
      id: "/map/"
      path: "/map"
      fullPath: "/map"
      preLoaderRoute: typeof MapIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/map/$serverId": {
      id: "/map/$serverId"
      path: "/map/$serverId"
      fullPath: "/map/$serverId"
      preLoaderRoute: typeof MapServerIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/journeys/$journeyId": {
      id: "/journeys/$journeyId"
      path: "/journeys/$journeyId"
      fullPath: "/journeys/$journeyId"
      preLoaderRoute: typeof JourneysJourneyIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  JourneysJourneyIdRoute: JourneysJourneyIdRoute,
  MapServerIdRoute: MapServerIdRoute,
  MapIndexRoute: MapIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
